#+TITLE: Advent of Code 2020 - Day 1 Solution/Explanation
#+AUTHOR: answer

[[file:~/git/advent-of-code/README.org][Return to README]]

* Input
#+name: Test Input
#+BEGIN_SRC text :tangle day1-input.txt
1721
979
366
299
675
1456
#+END_SRC

* Part 1
They provide you a list of numbers, and you have to find 2 numbers in that list that
equal up to 2020. There isn't really much explanation I can provide for this that is
really helpful since it is pretty self explanatory.

It's just for loops and testing lol

#+name: Day 1 - Part 1 Solution
#+BEGIN_SRC lisp :tangle day1-part1.lisp :exports both
  ;;;; Advent of Code 2020 - Day 1 Part 1 Solution

  ;;;; Solution
  (defun aoc-2020-day-1-part-1 (input)
	(block deep-loop
	  (loop for i below (length input)
			do (loop for j from (+ i 1) below (length input)
					 when (= (+ (nth j input) (nth i input)) 2020)
					   do (return-from deep-loop (* (nth j input) (nth i input)))))))

  ;;;; Send input
  (let ((input (with-open-file (stream "day1-input.txt")
				 (loop for line = (read-line stream nil)
					   while line
					   collect (parse-integer line)))))
	(aoc-2020-day-1-part-1 input))
#+END_SRC

#+RESULTS: Day 1 - Part 1 Solution
: 514579

* Part 2
Now it's just part 1, except it's 3 numbers now.

#+name: Day 1 - Part 2 Solution
#+BEGIN_SRC lisp :tangle day1-part2.lisp :exports both
  ;;;; Advent of Code 2020 - Day 1 Part 2 Solution

  ;;;; Solution
  (defun aoc-2020-day-1-part-2 (input)
	(block deep-loop
	  (loop for i below (length input)
			do (loop for j from (+ i 1) below (length input)
					 do (loop for k from (+ j 1) below (length input)
							  when (= (+ (nth j input) (nth i input) (nth k input)) 2020)
								do (return-from deep-loop (* (nth j input) (nth i input) (nth k input))))))))

  ;;;; Send input
  (let ((input (with-open-file (stream "day1-input.txt")
				 (loop for line = (read-line stream nil)
					   while line
					   collect (parse-integer line)))))
	(aoc-2020-day-1-part-2 input))
#+END_SRC

#+RESULTS: Day 1 - Part 2 Solution
: 241861950
